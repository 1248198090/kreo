name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]

env:
    NODE_VERSION: "18"

jobs:
    lint-and-format:
        name: Code Quality Checks
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm install

            - name: Check code formatting with Prettier
              run: npm run prettier

    security-checks:
        name: Security Audit
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm install

            # - name: Run security audit
            #   run: npm audit --audit-level=moderate

            - name: Run CodeQL Analysis
              uses: github/codeql-action/init@v3
              with:
                  languages: javascript
            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3

    build:
        name: Build Extension
        runs-on: ubuntu-latest
        needs: [lint-and-format, security-checks]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm install

            - name: Build extension
              run: npm run build:extension

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: chrome-extension-build
                  path: dist/
                  retention-days: 30

            - name: Check build size
              run: |
                  echo "Build size information:"
                  du -sh dist/
                  find dist/ -name "*.js" -exec wc -c {} + | sort -n

    # 部署到开发环境（可选）
    deploy-dev:
        name: Deploy to Development
        runs-on: ubuntu-latest
        needs: [build]
        if: github.ref == 'refs/heads/develop'

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: chrome-extension-build
                  path: dist/

            - name: Deploy to development environment
              run: |
                  echo "部署到开发环境的逻辑"
                  echo "可以在这里添加具体的部署步骤"

    # 发布到生产环境（仅main分支）
    deploy-prod:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [build]
        if: github.ref == 'refs/heads/main'

        steps:
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: chrome-extension-build
                  path: dist/

            - name: Create GitHub Release
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.DEMPLOYMENT_GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: Release ${{ github.ref }}
                  draft: false
                  prerelease: false

            - name: Upload Release Asset
              if: startsWith(github.ref, 'refs/tags/')
              run: |
                  cd dist
                  zip -r ../chrome-extension-${{ github.ref_name }}.zip .
                  echo "Chrome extension package created: chrome-extension-${{ github.ref_name }}.zip"
